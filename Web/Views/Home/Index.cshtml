@using GitDeployHub.Web.Engine.Processes
@model Hub

@{
    ViewBag.Title = "Git Deploy Hub";
}

<div>
    @if (Model.Queue.Count > 0)
    {
        <h2>Active</h2>
        <table>
            <thead>
                <tr>
                    <th>Instance</th>
                    <th>Status</th>
                    <th>Started</th>
                    <th>Parameters</th>
                    <th>Log</th>
                </tr>
            </thead>
            <tbody>

                @foreach (var process in Model.Queue.Reverse())
                {
                    <tr class="@(process.Succeeded ? "succeeded" : "failed")">
                        <td>@process.Instance.Name</td>
                        <td>@process.Status</td>
                        <td>@process.Started.ToString("s") (@DateTimeFormatter.TimeAgo(process.Started))</td>
                        <td>
                                @foreach (var param in process.Parameters)
                                {
                                        <pre>@param.Key: @param.Value</pre>
                                }
                        </td>
                        <td>
                            <pre>@process.FullLog</pre>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }


    <h2>Instances</h2>
    @if (!Model.Instances.Any())
    {
        <div>Empty</div>
    }
    else
    {
                    
        <table>
            <thead>
                <tr>
                    <th>Instance</th>
                    <th>Treeish</th>
                    <th>Preview</th>
                    <th></th>
                    <th></th>
                    <th>Tags</th>
                    <th>Completed</th>
                    <th>Parameters</th>
                    <th>Result</th>
                    <th>Log</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var instance in Model.Instances.OrderBy(i => i.Name))
                {
                    <tr class="@(instance.LastDeployment != null ? (instance.LastDeployment.Succeeded ? "succeeded" : "failed") : "unknown")">
                        <td>@instance.Name</td>
                        <td>@instance.Treeish</td>
                        <td>
                            <div title="Files that will change on next deploy. Click 'Update Preview' to refresh this list">
                                @if (instance.FilesChangedToTreeish.Length < 1)
                                {
                                    <span>no changes</span>
                                }
                                else
                                {
                                    <pre>@string.Join("\n", instance.FilesChangedToTreeish)</pre>
                                }
                            </div>
                        </td>
                        <td>
                            @Html.ActionLink("ChangeLog", "ChangeLog", "Instance", new { id = instance.Name }, new { title = "ChangeLog of currently deployed version"})
                        </td>
                        <td>
                            <form method="POST" action="@Url.Action("Manual", "Deployment", new { id = instance.Name, source = "dashboard", dry = true })">
                                <input type="submit" value="Update Preview" />
                            </form>
                            <form method="POST" action="@Url.Action("Manual", "Deployment", new { id = instance.Name, source = "dashboard" })">
                                <input type="submit" value="Deploy Now" />
                            </form>
                            @if (instance.HasSmokeTest && !(instance.LastDeployment != null && !instance.LastDeployment.Succeeded))
                            {
                            <form method="POST" action="@Url.Action("SmokeTest", "Deployment", new { id = instance.Name, source = "dashboard" })">
                                <input type="submit" value="Smoke Test" />
                            </form>
                            }
                        </td>
                    <td>
                        <ul class="instance-tags">
                            @foreach (var tag in instance.Tags)
                            {
                                <li>@tag</li>
                            }
                        </ul>
                    </td>
                    @{
                        var lastProcess = instance.LastSmokeTest != null && (instance.LastDeployment == null || instance.LastDeployment.Succeeded) ? instance.LastSmokeTest : (BaseProcess)instance.LastDeployment;
                    }
                    @if (lastProcess != null)
                        {
                            <td>@lastProcess.Completed.ToString("s")  (@DateTimeFormatter.TimeAgo(lastProcess.Completed))</td>
                            <td>
                                    @foreach (var param in lastProcess.Parameters)
                                    {
                                       <pre>@param.Key: @param.Value</pre>
                                    }
                            </td>
                            <td>
                                <pre>@((lastProcess.Succeeded ? "OK" : "ERROR: " + lastProcess.Exception.Message) + (lastProcess is SmokeTest ? "\n(smoke tested)" : ""))</pre>
                            </td>
                            <td>
                                <pre>@lastProcess.FullLog</pre>
                            </td>
                        }
                        else
                        {
                            <td colspan="2">No recent deployments</td>
                            <td colspan="3">Http POST to:<pre>@Url.Action("Start", "Deployment", new { id = instance.Name, source = "sourceName" }, "http")</pre>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }

    <h2>History</h2>
    @if (Model.ProcessHistory.Count == 0)
    {
        <div>Empty</div>
    }
    else
    {
                    
        <table>
            <thead>
                <tr>
                    <th>Instance</th>
                    <th>Status</th>
                    <th>Completed</th>
                    <th>Parameters</th>
                    <th>Result</th>
                    <th>Log</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var process in Model.ProcessHistory.Reverse())
                {
                    <tr class="@(process.Succeeded ? "succeeded" : "failed")">
                        <td>@process.Instance.Name</td>
                        <td>@process.Status</td>
                        <td>@process.Completed.ToString("s") (@DateTimeFormatter.TimeAgo(process.Completed))</td>
                        <td>
                                @foreach (var param in process.Parameters)
                                {
                                    <pre>@param.Key: @param.Value</pre>
                                }
                        </td>
                        <td>
                            <pre>@(process.Succeeded ? "OK" : "ERROR: " + process.Exception.Message)</pre>
                        </td>
                        <td>
                            <pre>@process.FullLog</pre>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    <hr />
    <style>
      .indented {
         padding-left: 18pt;
      }
    </style>

    <h2>Instructions</h2>
    <div class="instructions">
      N.B. The 3 buttons Update Preview, Deploy Now and Smoke Test may only be executed in a browser running on the target machine itself unless the gitDeployHub allowedAddresses setting has the browser's address added<br /> <br /> 

            1. Clone your website or install your application environment using an MSI:
        <pre><code>
    cd c:\InetPub
    mkdir wwwroot_git
    cd wwwroot_git
    git clone git@github.com:lansa/gitdeployhub.git
</code></pre>
            <p class="indented">(and publish it on IIS)</p>
            2. In your web.config file in C:\inetpub\wwwroot\gitdeployhub\Web:
        <pre><code>
    &lt;!-- allow deployments to be requested from localhost, and from github webhook servers --&gt;
    &lt;gitDeployHub allowedAddresses="192.30.252.*;185.199.108.*;127.0.0.1;::1"&gt;
        &lt;instances&gt;
            &lt;!-- folder is optional if location is ~\..\..\&lt;name&gt; --&gt;
            &lt;instance name="MyWebsite" folder="c:\InetPub\wwwroot\Path\To\MyWebsite" projectFolder="subfolder of folder where project-specific scripts may be placed"/&gt;
            &lt;instance name="LANSA example" folder="C:\Program Files (x86)\LANSA\1-Click Deployment" projectFolder="X_Win95\X_Lansa\X_Apps\DEMO"/&gt;
        &lt;/instances&gt;
    &lt;/gitDeployHub&gt;
</code></pre>
            3. Setup your hook to send an http POST to:<br />
            <pre>
    /api/deployments/instance-name?source=source-name
</pre>
            <p class="indented">For example, if you want to pull from a github repo go to Settings / Service Hooks / WebHook URLs,<br />
            and add:</p>
            <pre>
    @Url.Action("Start", "Deployment", new { id = "MyWebsite", source = "github" }, "http")
</pre>
            <p class="indented">(you can use query parameters to keep track of the request source)</p>

            4. Script configuration<br />
           <p class="indented">Scripts are located firstly in the <code>&lt;folder&gt;\&lt;project&gt;\autodeploy</code> folder<br /> 
           and then in the <code>&lt;folder&gt;\autodeploy</code> folder<br /><br />
       
           There are three script files:<br />
           <code>PreDeploy.ps1<br />
                  PostDeploy.ps1<br />
                  SmokeTest.ps1<br /></code>
           Note that there was a treeish configuration option for setting the git branch to use. Now the git branch is presumed to be the current branch. If it needs to be otherwise, change the branch in predeploy.ps1</p>

            5. Ready! (Push and refresh this page until you see the deployment result)<br />
           <p class="indented">Log messages may also be found in deployments.log in root of web site</p>
    </div>

    <script>
        setTimeout(function () {
            document.location = document.location.href;
        }, 30000);
    </script>
</div>
